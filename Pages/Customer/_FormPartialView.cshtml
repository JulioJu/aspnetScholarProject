@using Videotheque.Data
@model Customer
@{
  // For the second part of the Form (keep or return articles already borrowed)
  // ======================
  // Following commented doesn't work, I don't know why
  // It complains that CurrentlyBorrowedList isn't instantied in
  // page /Customer/Edit/:id
  // List<Article> CurrentlyBorrowedList;
  // string[] ShouldBeRemovedArray;
  // if (!@Context.Request.Path.ToString().Contains("/Edit/",
  //   System.StringComparison.InvariantCultureIgnoreCase))
  // {
  //   CurrentlyBorrowedList = (List<Article>)
  //       ViewData["CurrentlyBorrowedList"];
  //   ShouldBeRemovedArray =
  //     (string[])ViewData["ShouldBeRemovedArray"];
  // }
  List<Article> CurrentlyBorrowedList = (List<Article>)
      ViewData["CurrentlyBorrowedList"];
  string[] ShouldBeRemovedArray =
    (string[])ViewData["ShouldBeRemovedArray"];

  // For the third part of the Form (perform new borrowing)
  // ======================
  string[] ArticleIdToBorrowArrayInputValue =
    (string[])ViewData["ArticleIdToBorrowArrayInputValue"];
  string[] ArticleIdToBorrowLoanDurationArray =
    (string[])ViewData["ArticleIdToBorrowLoanDurationArray"];
  string[] ValidationMessageArticleIdToBorrowArray =
    (string[])ViewData["ValidationMessageArticleIdToBorrowArray"];
}

<!-- First part of tye form: general Customer info -->
<!-- ================================ -->

<div class="form-group">
  <label asp-for="Firstname" class="control-label"></label>
  <input asp-for="Firstname" class="form-control" />
  <span asp-validation-for="Firstname" class="text-danger"></span>
</div>
<div class="form-group">
  <label asp-for="Lastname" class="control-label"></label>
  <input asp-for="Lastname" class="form-control" />
  <span asp-validation-for="Lastname" class="text-danger"></span>
</div>
<div class="form-group">
  <label asp-for="Birthdate" class="control-label"></label>
  <input asp-for="Birthdate" class="form-control" />
  <span asp-validation-for="Birthdate" class="text-danger" ></span>
</div>
<div class="form-group">
  <label asp-for="Society" class="control-label"></label>
  <input asp-for="Society" class="form-control" />
  <span asp-validation-for="Society" class="text-danger"></span>
</div>
<div class="form-group">
  <label asp-for="Address" class="control-label"></label>
  <input asp-for="Address" class="form-control" />
  <span asp-validation-for="Address" class="text-danger"></span>
</div>
<div class="form-group">
  <label asp-for="Phone" class="control-label"></label>
  <input asp-for="Phone" class="form-control" />
  <span asp-validation-for="Phone" class="text-danger"></span>
</div>
<div class="form-group">
  <label asp-for="Email" class="control-label"></label>
  <input asp-for="Email" class="form-control" />
  <span asp-validation-for="Email" class="text-danger"></span>
</div>

<!-- Second part of the Form: we could return articles already borrowed -->
<!-- Only for /Customer/Edit/:id -->
<!-- ================================ -->

@if (@Context.Request.Path.ToString().Contains("/Edit/",
    System.StringComparison.InvariantCultureIgnoreCase))
{
  if (CurrentlyBorrowedList.Any())
  {
      @:<table id="CustomerEditArticlesCurrentlyBorrowed">
      <thead>
        <tr>
          <td>
            Article borrowed <br /> (barcode)
          </td>
          <td>
            Film Id <br />
          </td>
          <td>
            Film title
          </td>
          <td>
            Do you want return it?
          </td>
          <td>
            Should be returned before
          </td>
        </tr>
      </thead>
      @:<tbody>
    int index=0;
    foreach (Article article in CurrentlyBorrowedList)
    {
      bool isSelectFalse = true;
      bool isSelectTrue = false;
      if (ShouldBeRemovedArray != null
          && ShouldBeRemovedArray[index].Equals("true",
            System.StringComparison.InvariantCultureIgnoreCase))
      {
        isSelectFalse = false;
        isSelectTrue = true;
      }
      <tr class="form-group">
        <td>
          <input type="hidden" name="articleIdAlreadyBorrowedArray"
            value="@article.Id" />
          <a asp-page="/Article/Details"
              asp-route-id="@article.Id">
            @article.Id
          </a>
        </td>
        <td>
          <a asp-page="/Film/Details"
              asp-route-id="@article.FilmId">
            @article.FilmId
          </a>
        </td>
        <td>
          @article.Film.Title
        </td>
        <td>
            <div class="grid-container-should-be-removed">
              <label for="shouldBeRemovedArray@(index)True">Keep</label>
              <label for="shouldBeRemovedArray@(index)False">Return</label>
              <input id="shouldBeRemovedArray@(index)True" type="radio"
                value="false" name="shouldBeRemovedArray@(index)"
                checked="@isSelectFalse" />
              <input id="shouldBeRemovedArray@(index)False" type="radio"
                value="true" name="shouldBeRemovedArray@(index)"
                checked="@isSelectTrue" />
            </div>
        </td>
        <td> @article.ReturnDate?.ToShortDateString() </td>
      </tr>
      index++;
    }
      @:</tbody>
      @:</table>
      <label for="customDiscount">
        Custom discount in %
        (not cummulable with fixed discount)
      </label>
      int customDiscountValue = 0;
      if (Model.IsUnderage())
      {
        customDiscountValue = 10;
      }
      <input id="customDiscount" type="number" min="0" max="99"
        value="@customDiscountValue" name="customDiscount" required />
  }
  else
  {
    <p>No articles currently borrowed</p>
  }
}

<!-- Third part of the Form: make four new borrowing -->
<!-- ================================ -->

<table class="table-no-width">
<thead>
  <tr>
    <td>
      Article borrowed <br /> (barcode)
    </td>
    <td>
      Loan duration
    </td>
  </tr>
</thead>
<tbody>
@for (int index=0 ;
      index < Crud.NumberInputArticleToBorrow ;
      index++)
{
  int loanDuration;
  @if (ArticleIdToBorrowLoanDurationArray == null)
  {
    loanDuration = 2;
  }
  else
  {
    loanDuration = int.Parse(ArticleIdToBorrowLoanDurationArray[index]);
  }
  <tr class="form-group">
    <td>
      <input type="number" name="articleIdToBorrowArray"
          placeholder="Article Barcode (id)"
          value="@ArticleIdToBorrowArrayInputValue?[index]">
      <div class="text-danger field-validation-error customer-article-message-validation" >
        @Html.Raw(@ValidationMessageArticleIdToBorrowArray?[index])
      </div>
    </td>
    <td>
      <div class="grid-container-article-loan-duration">
        <label for="articleLoanDurationArray@(index)1">  1</label>
        <label for="articleLoanDurationArray@(index)2">  2</label>
        <label for="articleLoanDurationArray@(index)5">  5</label>
        <label for="articleLoanDurationArray@(index)7">  7</label>
        <label for="articleLoanDurationArray@(index)14"> 14</label>
        <input id="articleLoanDurationArray@(index)1" type="radio"
          value="1" name="articleLoanDurationArray@(index)"
          checked="@(loanDuration == 1)" />
        <input id="articleLoanDurationArray@(index)2" type="radio"
          value="2" name="articleLoanDurationArray@(index)"
          checked="@(loanDuration == 2)" />
        <input id="articleLoanDurationArray@(index)5" type="radio"
          value="5" name="articleLoanDurationArray@(index)"
          checked="@(loanDuration == 5)" />
        <input id="articleLoanDurationArray@(index)7" type="radio"
          value="7" name="articleLoanDurationArray@(index)"
          checked="@(loanDuration == 7)" />
        <input id="articleLoanDurationArray@(index)14" type="radio"
          value="14" name="articleLoanDurationArray@(index)"
          checked="@(loanDuration == 14)" />
      </div>
    </td>
  </tr>
}
</tbody>
</table>

<!-- vim:sw=2:ts=2:et:fileformat=dos
-->
